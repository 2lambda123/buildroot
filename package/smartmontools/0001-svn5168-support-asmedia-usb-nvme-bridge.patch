diff --git a/ChangeLog b/ChangeLog
index 39eac2d..dbddbc0 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,15 @@
 $Id: ChangeLog 5155 2020-12-30 16:49:18Z chrfranke $
 
+2021-01-17  Christian Franke  <franke@computer.org>
+
+	scsinvme.cpp: Add '-d sntasmedia' device type for ASMedia ASM2362
+	USB to NVMe bridges (#1221).
+	dev_interface.cpp: Update help text.
+	smartctl.8.in, smartd.conf.5.in: Document new option.
+
+	Thanks to Demian from Sabrent.
+
+
 2020-12-30  Christian Franke  <franke@computer.org>
 
 	smartmontools 7.2
diff --git a/dev_interface.cpp b/dev_interface.cpp
index 456c57b..dba4b77 100644
--- a/dev_interface.cpp
+++ b/dev_interface.cpp
@@ -3,7 +3,7 @@
  *
  * Home page of code is: https://www.smartmontools.org
  *
- * Copyright (C) 2008-20 Christian Franke
+ * Copyright (C) 2008-21 Christian Franke
  *
  * SPDX-License-Identifier: GPL-2.0-or-later
  */
@@ -309,7 +309,7 @@ std::string smart_interface::get_valid_dev_types_str()
   // default
   std::string s =
     "ata, scsi[+TYPE], nvme[,NSID], sat[,auto][,N][+TYPE], usbcypress[,X], "
-    "usbjmicron[,p][,x][,N], usbprolific, usbsunplus, sntjmicron[,NSID], "
+    "usbjmicron[,p][,x][,N], usbprolific, usbsunplus, sntasmedia, sntjmicron[,NSID], "
     "sntrealtek, intelliprop,N[+TYPE], jmb39x[-q],N[,sLBA][,force][+TYPE], "
     "jms56x,N[,sLBA][,force][+TYPE]";
   // append custom
diff --git a/scsinvme.cpp b/scsinvme.cpp
index 30bfdf8..334cde9 100644
--- a/scsinvme.cpp
+++ b/scsinvme.cpp
@@ -3,11 +3,10 @@
  *
  * Home page of code is: https://www.smartmontools.org
  *
- * Copyright (C) 2020 Christian Franke
+ * Copyright (C) 2020-21 Christian Franke
  * Copyright (C) 2018 Harry Mallon <hjmallon@gmail.com>
  *
  * SPDX-License-Identifier: GPL-2.0-or-later
- *
  */
 
 #include "config.h"
@@ -26,6 +25,92 @@ const char * scsinvme_cpp_svnid = "$Id: scsinvme.cpp 5144 2020-12-29 12:50:16Z c
 // SNT (SCSI NVMe Translation) namespace and prefix
 namespace snt {
 
+/////////////////////////////////////////////////////////////////////////////
+// sntasmedia_device
+
+class sntasmedia_device
+: public tunnelled_device<
+    /*implements*/ nvme_device,
+    /*by tunnelling through a*/ scsi_device
+  >
+{
+public:
+  sntasmedia_device(smart_interface * intf, scsi_device * scsidev,
+                    const char * req_type, unsigned nsid);
+
+  virtual ~sntasmedia_device();
+
+  virtual bool nvme_pass_through(const nvme_cmd_in & in, nvme_cmd_out & out);
+};
+
+sntasmedia_device::sntasmedia_device(smart_interface * intf, scsi_device * scsidev,
+                                     const char * req_type, unsigned nsid)
+: smart_device(intf, scsidev->get_dev_name(), "sntasmedia", req_type),
+  tunnelled_device<nvme_device, scsi_device>(scsidev, nsid)
+{
+  set_info().info_name = strprintf("%s [USB NVMe ASMedia]", scsidev->get_info_name());
+}
+
+sntasmedia_device::~sntasmedia_device()
+{
+}
+
+bool sntasmedia_device::nvme_pass_through(const nvme_cmd_in & in, nvme_cmd_out & /* out */)
+{
+  unsigned size = in.size;
+  unsigned cdw10_hi = in.cdw10 >> 16;
+  switch (in.opcode) {
+    case smartmontools::nvme_admin_identify:
+      if (in.cdw10 == 0x0000001) // Identify controller
+        break;
+      if (in.cdw10 == 0x0000000) { // Identify namespace
+        if (in.nsid == 1)
+          break;
+        return set_err(ENOSYS, "NVMe Identify Namespace 0x%x not supported", in.nsid);
+      }
+      return set_err(ENOSYS, "NVMe Identify with CDW10=0x%08x not supported", in.cdw10);
+    case smartmontools::nvme_admin_get_log_page:
+      if (!(in.nsid == 0xffffffff || !in.nsid))
+        return set_err(ENOSYS, "NVMe Get Log Page with NSID=0x%x not supported", in.nsid);
+      if (size > 0x200) { // Reading more results in command timeout
+        // TODO: Add ability to return short reads to caller
+        size = 0x200;
+        cdw10_hi = (size / 4) - 1;
+        pout("Warning: NVMe Get Log truncated to 0x%03x bytes, 0x%03x bytes zero filled\n", size, in.size - size);
+      }
+      break;
+    default:
+      return set_err(ENOSYS, "NVMe admin command 0x%02x not supported", in.opcode);
+    break;
+  }
+  if (in.cdw11 || in.cdw12 || in.cdw13 || in.cdw14 || in.cdw15)
+    return set_err(ENOSYS, "Nonzero NVMe command dwords 11-15 not supported");
+
+  uint8_t cdb[16] = {0, };
+  cdb[0] = 0xe6;
+  cdb[1] = in.opcode;
+  //cdb[2] = ?
+  cdb[3] = (uint8_t)in.cdw10;
+  //cdb[4..6] = ?
+  cdb[7] = (uint8_t)cdw10_hi;
+  //cdb[8..15] = ?
+
+  scsi_cmnd_io io_hdr; memset(&io_hdr, 0, sizeof(io_hdr));
+  io_hdr.cmnd = cdb;
+  io_hdr.cmnd_len = sizeof(cdb);
+  io_hdr.dxfer_dir = DXFER_FROM_DEVICE;
+  io_hdr.dxferp = (uint8_t *)in.buffer;
+  io_hdr.dxfer_len = size;
+  memset(in.buffer, 0, in.size);
+
+  scsi_device * scsidev = get_tunnel_dev();
+  if (!scsidev->scsi_pass_through_and_check(&io_hdr, "sntasmedia_device::nvme_pass_through: "))
+    return set_err(scsidev->get_err());
+
+  //out.result = ?;
+  return true;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // sntjmicron_device
 
@@ -327,7 +412,12 @@ nvme_device * smart_interface::get_snt_device(const char * type, scsi_device * s
     return 0;
   }
 
-  if (!strncmp(type, "sntjmicron", 10)) {
+  if (!strcmp(type, "sntasmedia")) {
+    // No namespace supported
+    sntdev = new sntasmedia_device(this, scsidev, type, 0xffffffff);
+  }
+
+  else if (!strncmp(type, "sntjmicron", 10)) {
     int n1 = -1, n2 = -1, len = strlen(type);
     unsigned nsid = 0; // invalid namespace id -> use default
     sscanf(type, "sntjmicron%n,0x%x%n", &n1, &nsid, &n2);
diff --git a/smartctl.8.in b/smartctl.8.in
index d220b85..ca260a0 100644
--- a/smartctl.8.in
+++ b/smartctl.8.in
@@ -1,6 +1,6 @@
 .ig
 Copyright (C) 2002-10 Bruce Allen
-Copyright (C) 2004-20 Christian Franke
+Copyright (C) 2004-21 Christian Franke
 
 SPDX-License-Identifier: GPL-2.0-or-later
 
@@ -465,6 +465,11 @@ PL2571/2771/2773/2775 USB to SATA bridge.
 \- this device type is for SATA disks that are behind a SunplusIT USB to SATA
 bridge.
 .Sp
+.I sntasmedia
+\- [NEW EXPERIMENTAL SMARTCTL FEATURE]
+this device type is for NVMe disks that are behind an ASMedia USB to NVMe
+bridge.
+.Sp
 .I sntjmicron[,NSID]
 \- this device type is for NVMe disks that are behind a JMicron USB to NVMe
 bridge.
diff --git a/smartd.conf.5.in b/smartd.conf.5.in
index 5e41f33..cf282ad 100644
--- a/smartd.conf.5.in
+++ b/smartd.conf.5.in
@@ -1,6 +1,6 @@
 .ig
 Copyright (C) 2002-10 Bruce Allen
-Copyright (C) 2004-20 Christian Franke
+Copyright (C) 2004-21 Christian Franke
 
 SPDX-License-Identifier: GPL-2.0-or-later
 
@@ -445,6 +445,11 @@ PL2571/2771/2773/2775 USB to SATA bridge.
 \- this device type is for SATA disks that are behind a SunplusIT USB to SATA
 bridge.
 .Sp
+.I sntasmedia
+\- [NEW EXPERIMENTAL SMARTD FEATURE]
+this device type is for NVMe disks that are behind an ASMedia USB to NVMe
+bridge.
+.Sp
 .I sntjmicron[,NSID]
 \- this device type is for NVMe disks that are behind a JMicron USB to NVMe
 bridge.
