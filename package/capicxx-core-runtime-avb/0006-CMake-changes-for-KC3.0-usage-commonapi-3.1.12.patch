From 4bd5f618551677e2ff9e8ea57983219ba42cb6f5 Mon Sep 17 00:00:00 2001
From: "delex.ogunjumelo" <delex.ogunjumelo@intel.com>
Date: Tue, 3 Jul 2018 17:40:19 +0100
Subject: [PATCH] CMake changes for KC3.0 usage - commonapi-3.1.12

---
 CMakeLists.txt                 | 65 ++++++++++++++++++++----------------------
 cmake/CommonAPIConfig.cmake.in | 14 ++++++++-
 2 files changed, 44 insertions(+), 35 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9aeb97a..588f2be 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,8 +4,9 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 cmake_minimum_required (VERSION 2.8.12)
+include(GNUInstallDirs)
 
-PROJECT(libcommonapi)
+PROJECT(CommonAPI)
 
 # version of CommonAPI
 SET( LIBCOMMONAPI_MAJOR_VERSION 3 )
@@ -18,7 +19,6 @@ set(COMPONENT_VERSION ${LIBCOMMONAPI_MAJOR_VERSION}.${LIBCOMMONAPI_MINOR_VERSION
 set(COMMONAPI_API_HEADER_VERSION ${LIBCOMMONAPI_MAJOR_VERSION}.${LIBCOMMONAPI_MINOR_VERSION}) # used in *.cmake.in
 
 SET(PACKAGE_VERSION "${COMPONENT_VERSION}") # used in *.cmake.in
-message(STATUS "This is CMake for Common API C++ Version ${COMPONENT_VERSION}.")
 
 # OS
 set(DL_LIBRARY "")
@@ -37,7 +37,6 @@ message(STATUS "CMAKE_INSTALL_PREFIX set to: ${CMAKE_INSTALL_PREFIX}")
 # create the commandline variables:
 OPTION(BUILD_SHARED_LIBS "Set to OFF to build static libraries" ON )
 message(STATUS "BUILD_SHARED_LIBS is set to value: ${BUILD_SHARED_LIBS}")
-SET(RPM_PACKAGE_VERSION "r0" CACHE STRING "rpm packet version") # used in e.g. commonapi.spec.in
 
 SET(MAX_LOG_LEVEL "DEBUG" CACHE STRING "maximum log level")
 message(STATUS "MAX_LOG_LEVEL is set to value: ${MAX_LOG_LEVEL}")
@@ -47,18 +46,18 @@ if(NOT CMAKE_BUILD_TYPE)
        "Choose the type of build, options are: Debug Release." FORCE)
 endif(NOT CMAKE_BUILD_TYPE)
 
-set(CMAKE_BUILD_TYPE_FOR_SPEC_IN "")
+set(CMAKE_BUILD_TYPE_FOR_SPEC_IN "") # used in *.cmake.in
 string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_FOR_SPEC_IN)
 
 # Offer the user the choice of overriding the installation directories
-set(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
+set(INSTALL_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH "Installation directory for libraries")
 set(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for binaries")
 set(INSTALL_INCLUDE_DIR include/CommonAPI-${COMMONAPI_API_HEADER_VERSION} CACHE PATH "Installation directory for header files")
 
 if(WIN32 AND NOT CYGWIN)
   set(DEF_INSTALL_CMAKE_DIR cmake)
 else()
-  set(DEF_INSTALL_CMAKE_DIR lib/cmake/CommonAPI-${COMPONENT_VERSION})
+  set(DEF_INSTALL_CMAKE_DIR ${INSTALL_LIB_DIR}/cmake/CommonAPI-${COMPONENT_VERSION})
 endif()
 set(INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH "Installation directory for CMake files")
 
@@ -68,14 +67,6 @@ message(STATUS "USE_FILE is set to value: ${USE_FILE}")
 OPTION(USE_CONSOLE "Set to OFF to disable console logging" OFF )
 message(STATUS "USE_CONSOLE is set to value: ${USE_CONSOLE}")
 
-# Make relative paths absolute (needed later on)
-foreach(p LIB INCLUDE CMAKE)
-  set(var INSTALL_${p}_DIR)
-  if(NOT IS_ABSOLUTE "${${var}}")
-    set(ABSOLUTE_${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
-  endif()
-endforeach()
-
 message(STATUS "RPM packet version set to ${RPM_PACKAGE_VERSION}")
 ##################### RPM CONFIG ########################
 SET( LICENSE "MPLv2" )
@@ -98,16 +89,17 @@ IF(MSVC)
     add_definitions(-DCOMMONAPI_INTERNAL_COMPILATION -DCOMMONAPI_DLL_COMPILATION)
     add_compile_options(/EHsc /wd4996)
 ELSE ()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -Wall -Wextra -Wformat -Wformat-security -Wconversion -fexceptions -fstrict-aliasing -fstack-protector -fasynchronous-unwind-tables -fno-omit-frame-pointer -Werror -DCOMMONAPI_INTERNAL_COMPILATION")
+    set(OFLAG_IN_DEBUG)
+    if ("${CMAKE_BUILD_TYPE}x" STREQUAL "Debugx")
+        set(OFLAG_IN_DEBUG "-O")
+    endif()
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x ${OFLAG_IN_DEBUG} -Wall -Wextra -Wformat -Wformat-security -fexceptions -fstrict-aliasing -fstack-protector -fasynchronous-unwind-tables -fno-omit-frame-pointer -D_FORTIFY_SOURCE=2 -Werror -DCOMMONAPI_INTERNAL_COMPILATION -DUSE_CONSOLE")
 ENDIF(MSVC)
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCOMMONAPI_LOGLEVEL=COMMONAPI_LOGLEVEL_${MAX_LOG_LEVEL}")
  
 FIND_PACKAGE(PkgConfig)
 pkg_check_modules(DLT "automotive-dlt >= 2.11")
-IF(DLT_FOUND) 
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DLT")
-ENDIF(DLT_FOUND)
 
 ##############################################################################
 
@@ -139,14 +131,23 @@ CONFIGURE_FILE(commonapi.spec.in commonapi.spec)
 file (GLOB_RECURSE CommonAPI_INCLUDE_INSTALL_FILES "include/CommonAPI/*.hpp")
 list (SORT CommonAPI_INCLUDE_INSTALL_FILES)
 set_target_properties (CommonAPI PROPERTIES PUBLIC_HEADER "${CommonAPI_INCLUDE_INSTALL_FILES}")
+target_include_directories(CommonAPI PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>
+  $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
+)
+
+IF(DLT_FOUND)
+  target_compile_options(CommonAPI PUBLIC
+    -DUSE_DLT
+  )
+ENDIF(DLT_FOUND)
 
 # install CommonAPI library including headers
-install(TARGETS CommonAPI
-        EXPORT CommonAPITargets
-        LIBRARY DESTINATION ${INSTALL_LIB_DIR}
-        RUNTIME DESTINATION ${INSTALL_BIN_DIR}
-        ARCHIVE DESTINATION ${INSTALL_LIB_DIR}
-        PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}/CommonAPI"
+install(
+    TARGETS CommonAPI
+    EXPORT CommonAPITargets
+    LIBRARY DESTINATION ${INSTALL_LIB_DIR}
+    PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}/CommonAPI"
 )
 
 ##############################################################################
@@ -160,16 +161,12 @@ export(TARGETS CommonAPI
 # (this registers the build-tree with a global CMake-registry)
 export(PACKAGE CommonAPI)
 
-# Create the CommonAPIConfig.cmake and CommonAPIConfigVersion files ...
-file(RELATIVE_PATH REL_INCLUDE_DIR "${ABSOLUTE_INSTALL_CMAKE_DIR}" "${ABSOLUTE_INSTALL_INCLUDE_DIR}")
-
 # ... for the build tree
 set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/include" )
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CommonAPIConfig.cmake.in
   "${PROJECT_BINARY_DIR}/CommonAPIConfig.cmake" @ONLY)
 
 # ... for the install tree
-set(CONF_INCLUDE_DIRS "\${COMMONAPI_CMAKE_DIR}/${REL_INCLUDE_DIR}")
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CommonAPIConfig.cmake.in
   "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CommonAPIConfig.cmake" @ONLY)
 
@@ -184,14 +181,14 @@ install(FILES
   DESTINATION "${INSTALL_CMAKE_DIR}")
 
 # Install the export set for use with the install-tree
-install(EXPORT CommonAPITargets DESTINATION
-  "${INSTALL_CMAKE_DIR}")
+install(
+    EXPORT CommonAPITargets
+    DESTINATION "${INSTALL_CMAKE_DIR}"
+)
 
 ##############################################################################
 # maintainer-clean
-add_custom_target(maintainer-clean
-   COMMAND rm -rf *
-)
+add_custom_target(maintainer-clean COMMAND rm -rf *)
 
 ##############################################################################
 # dist
@@ -207,7 +204,7 @@ if (NOT DOXYGEN_FOUND)
     message(STATUS "Doxygen is not installed. Documentation can not be built.")
 else()
     # set configuration variables for doxygen.in
-    set(PROJECT "Common API C++")
+    set(PROJECT "GENIVI IPC Common API C++")
     set(DOCDIR doc)
     set(SRCDIR .)
     set(GENERATE_HTML YES)
diff --git a/cmake/CommonAPIConfig.cmake.in b/cmake/CommonAPIConfig.cmake.in
index 2c4fea4..fe17ad7 100644
--- a/cmake/CommonAPIConfig.cmake.in
+++ b/cmake/CommonAPIConfig.cmake.in
@@ -4,10 +4,22 @@
 
 # Compute paths
 get_filename_component(COMMONAPI_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
-set(COMMONAPI_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")
+
+get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" REALPATH)
+get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
+get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
+get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
+get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
+set(COMMONAPI_INCLUDE_DIRS "${_IMPORT_PREFIX}/include/CommonAPI-3.1")
 
 # Our library dependencies (contains definitions for IMPORTED targets)
 include("${COMMONAPI_CMAKE_DIR}/CommonAPITargets.cmake")
 
+# Workaround if properties do not work.
+# Normally, target_link_libraries(CommonAPI) would
+# resolve all paths
+set(_IMPORT_PREFIX)
+# end of workaround
+
 set(COMMONAPI_VERSION @PACKAGE_VERSION@)
 set(COMMONAPI_VERSION_STRING "@PACKAGE_VERSION@")
-- 
2.7.4

